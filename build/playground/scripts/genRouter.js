#!/usr/bin/env node
const fe = require('fs-extra')
const path = require('path')
const yaml = require('js-yaml')
const prettify = require('prettier')

function format(code) {
  return prettify.format(code, {
    parser: 'typescript',
    printWidth: 2000,
    singleQuote: true,
    semi: true,
    tabWidth: 2,
    bracketSpacing: true,
    useTabs: false,
    arrowParens: 'avoid',
  })
}
function resolve(p) {
  return path.resolve(__dirname, p)
}
function unique(arr) {
  let hash = []
  for (let i = 0; i < arr.length; i++) {
    if (arr.indexOf(arr[i]) === i) {
      hash.push(arr[i])
    }
  }
  return hash
}
const routesPath = path.join(__dirname, '../../../playground/routes.yaml')
const distPath = path.resolve(__dirname, '../../../playground/views')

const importIcons = []
const importRoutes = []
const isolatedRoutes = []

function genMenus(data) {
  const menuData = data.filter(i => !i.isolated)

  const iconArr = importIcons.length > 0 ? importIcons.join(',') : ''
  function genItem(item) {
    return `{
			item: '${item.name}',
			key: '${item.name}',
			${item.icon ? `icon: <${item.icon}/>,` : ''}
			${item.path ? `path: '${item.path}',` : ''}
			${
        item.children
          ? `children: [${item.children.filter(k => k.isMenu !== false).map(c => genItem(c))}]`
          : ''
      }
		}`
  }
  const routerStr = menuData.map(m => genItem(m)).join(',\n')
  console.log(routerStr, menuData)
  const tpl = `
/* eslint-disable */
/** This is the code automatically generated by playground/scripts/genRouter
*  please do not modify ;
* 	See the configuration file: routes.yaml.
* */
import React from 'react'
${iconArr ? `import { ${iconArr} } from '@ant-design/icons'` : ''}


export default  [${routerStr}]`

  return tpl
}

function genRouter(routes) {
  const routerStr = routes
    .map(
      route =>
        `<Route path='${route.path}' component={lazy(() => import('../page/${route.src}')) } />`,
    )
    .join('\n')
  const tpl = `
/* eslint-disable */
/** 
 * This is the code automatically generated by playground/scripts/genRouter
 * please do not modify ;
 * See the configuration file: routes.yaml.
 */
import React, { Suspense, lazy } from 'react'
import { Switch,Route } from 'react-router-dom'

export default function () {
	return (
	  <>
	 
	  <Suspense fallback={<div>Loading...</div>}>
	  <Switch>
	  ${routerStr}
	  </Switch>
	</Suspense>
	 
	 
		
	  </>
	)
	}

export const isolatedRoutes = [
	${isolatedRoutes.map(r => `'${r}'`).join(',\n')}
]
`

  return tpl
}

function genChildrenData(children) {
  children.forEach(k => {
    if (!k.src || !k.name) {
      throw new Error('Source path and name cannot be missing')
    }
    let path = k.src
    if (k.icon) {
      importIcons.push(k.icon)
    }
    if (k.path) {
      path = k.path
    }
    if (!path.startsWith('/')) {
      path = '/' + path
    }
    importRoutes.push({
      name: k.name,
      path: path,
      src: k.src,
    })
    k.path = path
  })
}

function genIsolatedRoute(route) {
  let { path, src } = route
  if (!path.startsWith('/')) {
    path = '/' + path
  }
  isolatedRoutes.push(path)
  importRoutes.push({ path, src })
}

function run() {
  const yamlFile = fe.readFileSync(routesPath, 'utf8')
  const yamlContent = yaml.safeLoad(yamlFile)

  yamlContent.forEach(k => {
    if (k.icon) {
      importIcons.push(k.icon)
    }
    k.isolated ? genIsolatedRoute(k) : genChildrenData(k.children)
  })

  Promise.all([
    fe.writeFile(distPath + '/menuArr.tsx', format(genMenus(yamlContent)), { encoding: 'utf8' }),
    fe.writeFile(distPath + '/route.tsx', format(genRouter(importRoutes)), { encoding: 'utf8' }),
  ])
    .then(() => {
      console.log('Generated successfully！')
    })
    .catch(e => {
      console.error(e)
    })
}

run()
